

from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
import re
from keyboards.inline_keyboards import get_task_list_keyboard, get_main_menu_keyboard, get_delete_task_keyboard
from data.tasks import tasks
from utils import validate_deadline


router = Router()

# === FSM States ===
class AddTaskState(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_due_date = State()
    waiting_for_priority = State()

class EditTaskState(StatesGroup):
    waiting_for_new_title = State()
    waiting_for_new_description = State()
    waiting_for_new_due_date = State()
    waiting_for_new_priority = State()

# === –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫—É –∑–∞–≤–¥–∞–Ω—å ===
@router.callback_query(F.data == "test_btn_1")
async def show_tasks(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üìã *–û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è:*",
        parse_mode="Markdown",
        reply_markup=get_task_list_keyboard()
    )

# === –î–µ—Ç–∞–ª—ñ –∑–∞–≤–¥–∞–Ω–Ω—è ===
@router.callback_query(F.data.startswith("task_"))
async def show_task_details(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split("_")[1])
    task = next((t for t in tasks if t["id"] == task_id), None)

    if task:
        text = (
            f"üìå *{task['title']}*\n\n"
            f"{task['description']}\n\n"
            f"üìÖ –î–∞—Ç–∞: {task['due_date']}\n"  # –î–∞—Ç–∞ –≤–∂–µ –≤–∫–ª—é—á–∞—î –≥–æ–¥–∏–Ω—É —Ç–∞ —Ö–≤–∏–ª–∏–Ω–∏
            f"‚ö° –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {task['priority']}"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[  # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è
            [InlineKeyboardButton(text="‚úè –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_task_{task_id}")],
            [InlineKeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_{task_id}")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="test_btn_1")]
        ])
        await callback_query.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )


# === –ü–æ—á–∞—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è ===
@router.callback_query(F.data.startswith("edit_task_"))
async def edit_task_start(callback_query: types.CallbackQuery, state: FSMContext):
    task_id = int(callback_query.data.split("_")[2])
    await state.update_data(task_id=task_id)
    await callback_query.message.answer("‚úè –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –∑–∞–≤–¥–∞–Ω–Ω—è:")
    await state.set_state(EditTaskState.waiting_for_new_title)

@router.message(EditTaskState.waiting_for_new_title)
async def edit_task_title(message: Message, state: FSMContext):
    await state.update_data(new_title=message.text)
    await message.answer("üñä –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è:")
    await state.set_state(EditTaskState.waiting_for_new_description)

@router.message(EditTaskState.waiting_for_new_description)
async def edit_task_description(message: Message, state: FSMContext):
    await state.update_data(new_description=message.text)
    await message.answer("üìÖ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω—É (—É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î):")
    await state.set_state(EditTaskState.waiting_for_new_due_date)

@router.message(EditTaskState.waiting_for_new_due_date)
async def edit_task_due_date(message: Message, state: FSMContext):
    await state.update_data(new_due_date=message.text)
    await message.answer("‚ö° –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç (low, medium –∞–±–æ high):")
    await state.set_state(EditTaskState.waiting_for_new_priority)

@router.message(EditTaskState.waiting_for_new_priority)
async def edit_task_priority(message: Message, state: FSMContext):
    await state.update_data(new_priority=message.text)
    data = await state.get_data()

    task_id = data['task_id']
    task = next((t for t in tasks if t["id"] == task_id), None)

    if task:
        task["title"] = data['new_title']
        task["description"] = data['new_description']
        task["due_date"] = data['new_due_date']
        task["priority"] = data['new_priority']

        await message.answer("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_main_menu_keyboard())
    else:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    await state.clear()

# === –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ===
@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üîô *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:*",
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard()
    )

# === –ü–æ—á–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è ===
@router.callback_query(F.data == "add_task")
async def start_add_task(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–≤–¥–∞–Ω–Ω—è:")
    await state.set_state(AddTaskState.waiting_for_title)

@router.message(AddTaskState.waiting_for_title)
async def task_title_entered(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("üñä –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è:")
    await state.set_state(AddTaskState.waiting_for_description)

@router.message(AddTaskState.waiting_for_description)
async def task_description_entered(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω—É (—É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î-HH:mm):")
    await state.set_state(AddTaskState.waiting_for_due_date)

@router.message(AddTaskState.waiting_for_due_date)
async def task_due_date_entered(message: Message, state: FSMContext):
    await state.update_data(due_date=message.text)
    await message.answer("‚ö° –í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç (low, medium –∞–±–æ high):")
    await state.set_state(AddTaskState.waiting_for_priority)

@router.message(AddTaskState.waiting_for_priority)
async def task_priority_entered(message: Message, state: FSMContext):
    await state.update_data(priority=message.text)
    data = await state.get_data()

    new_task = {
        "id": len(tasks) + 1,
        "title": data['title'],
        "description": data['description'],
        "due_date": data['due_date'],
        "priority": data['priority'],
        "completed": False
    }
    tasks.append(new_task)

    await message.answer("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!", reply_markup=get_main_menu_keyboard())
    await state.clear()

# === –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è" ===
@router.callback_query(F.data == "delete_task")
async def choose_task_to_delete(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üóë *–û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:*",
        parse_mode="Markdown",
        reply_markup=get_delete_task_keyboard()
    )

# === –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è ===
@router.callback_query(F.data.startswith("delete_"))
async def delete_task(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split("_")[1])

    global tasks
    tasks = [t for t in tasks if t["id"] != task_id]

    await callback_query.message.edit_text(
        "‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.",
        reply_markup=get_task_list_keyboard()
    )
    print(tasks)


def get_task_list_keyboard() -> InlineKeyboardMarkup:
    priority_order = {"high": 3, "medium": 2, "low": 1}
    sorted_tasks = sorted(tasks, key=lambda x: priority_order.get(x["priority"], 0), reverse=True)

    keyboard = []
    for task in sorted_tasks:
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏, —â–æ–± –≤–∫–∞–∑–∞—Ç–∏ —Ç–æ—á–Ω–∏–π —á–∞—Å
        keyboard.append([
            InlineKeyboardButton(text=f"üìå {task['title']} (‚ö° {task['priority']} - {task['due_date']})", callback_data=f"task_{task['id']}")
        ])

    keyboard.append([
        InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ])


    return InlineKeyboardMarkup(inline_keyboard=keyboard)



@router.callback_query(F.data.startswith("delete_"))
async def delete_task_handler(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split("_")[1])

    tasks = load_tasks()
    tasks = [t for t in tasks if t["id"] != task_id]

    # **–û–Ω–æ–≤–ª—é—î–º–æ id —É —Å–ø–∏—Å–∫—É**
    for index, task in enumerate(tasks):
        task["id"] = index + 1

    save_tasks(tasks)

    await callback_query.message.edit_text(
        "‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.\n–û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å:",
        reply_markup=get_task_list_keyboard()
    )




# === –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è ===
@router.callback_query(F.data.startswith("complete_task_"))
async def complete_task(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split("_")[2])
    task = next((t for t in tasks if t["id"] == task_id), None)

    if task:
        task["completed"] = True  # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ
        await callback_query.message.edit_text(
            f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è \"{task['title']}\" –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
            reply_markup=get_task_list_keyboard()
        )
    else:
        await callback_query.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# === –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å ===
@router.callback_query(F.data == "completed_tasks")
async def show_completed_tasks(callback_query: types.CallbackQuery):
    completed = [task for task in tasks if task.get("completed")]

    if not completed:
        await callback_query.message.answer("‚ùå –ù–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=task["title"], callback_data=f"task_{task['id']}")] for task in completed
    ] + [[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]])

    await callback_query.message.edit_text("‚úÖ *–ó–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:*", parse_mode="Markdown", reply_markup=keyboard)


# === –í–∏–±—ñ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è ===
@router.callback_query(F.data == "complete_task")
async def choose_task_to_complete(callback_query: types.CallbackQuery):
    incomplete_tasks = [task for task in tasks if not task.get("completed")]

    if not incomplete_tasks:
        await callback_query.message.answer("‚úÖ –í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω—ñ!")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üìå {task['title']}", callback_data=f"complete_task_{task['id']}")] for task in incomplete_tasks
    ] + [[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]])

    await callback_query.message.edit_text("üìù *–û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è:*", parse_mode="Markdown", reply_markup=keyboard)

# === –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ–≥–æ ===
@router.callback_query(F.data.startswith("complete_task_"))
async def complete_task(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split("_")[2])
    task = next((t for t in tasks if t["id"] == task_id), None)

    if task:
        task["completed"] = True  # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ
        await callback_query.message.edit_text(
            f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è \"{task['title']}\" –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await callback_query.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


@router.callback_query(F.data == "incomplete_tasks")
async def show_incomplete_tasks(callback_query: types.CallbackQuery):
    incomplete = [task for task in tasks if not task.get("completed")]

    if not incomplete:
        await callback_query.message.answer("‚úÖ –í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω—ñ!")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üìå {task['title']}", callback_data=f"task_{task['id']}")] for task in incomplete
    ] + [[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]])

    await callback_query.message.edit_text("üìå *–ù–µ –≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:*", parse_mode="Markdown", reply_markup=keyboard)

@router.message(AddTaskState.waiting_for_due_date)
async def task_due_date_entered(message: Message, state: FSMContext):
    await state.update_data(due_date=message.text)  # –ù–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–¥–ª–∞–π–Ω—É –∑ —á–∞—Å–æ–º
    await message.answer("‚ö° –í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç (low, medium –∞–±–æ high):")
    await state.set_state(AddTaskState.waiting_for_priority)



@router.message(F.text == "‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å")
async def about_us_handler(message: Message):
    await message.answer("–ú–∏ ‚Äî –∫–æ–º–∞–Ω–¥–∞, —è–∫–∞ —Å—Ç–≤–æ—Ä–∏–ª–∞ —Ü—å–æ–≥–æ –±–æ—Ç–∞ üí¨\n–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏: @nazark0wxx")

from datetime import datetime



# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏
def validate_due_date(due_date: str) -> bool:
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏ "YYYY-MM-DD-HH:mm"
    if not re.match(r"^\d{4}-\d{2}-\d{2}-\d{2}:\d{2}$", due_date):
        return False
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –¥–∞—Ç–∞ –Ω–µ –≤ –º–∏–Ω—É–ª–æ–º—É
        deadline = datetime.strptime(due_date, "%Y-%m-%d-%H:%M")
        if deadline < datetime.now():
            return False
    except ValueError:
        return False
    return True

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
def validate_priority(priority: str) -> bool:
    return priority.lower() in ["low", "medium", "high"]

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏ —Ç–µ–∫—Å—Ç—É
def validate_length(text: str, max_length: int) -> bool:
    return len(text) <= max_length

# === –ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è ===
@router.callback_query(F.data == "add_task")
async def start_add_task(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–≤–¥–∞–Ω–Ω—è:")
    await state.set_state(AddTaskState.waiting_for_title)

@router.message(AddTaskState.waiting_for_title)
async def task_title_entered(message: Message, state: FSMContext):
    title = message.text.strip()
    if not title:
        await message.answer("‚ùå –ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    if not validate_length(title, 100):
        await message.answer("‚ùå –ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 100 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    await state.update_data(title=title)
    await message.answer("üñä –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è:")
    await state.set_state(AddTaskState.waiting_for_description)

@router.message(AddTaskState.waiting_for_description)
async def task_description_entered(message: Message, state: FSMContext):
    description = message.text.strip()
    if not description:
        await message.answer("‚ùå –û–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    if not validate_length(description, 500):
        await message.answer("‚ùå –û–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 500 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    await state.update_data(description=description)
    await message.answer("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω—É (—É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î-–ì–ì:—Ö—Ö):")
    await state.set_state(AddTaskState.waiting_for_due_date)

@router.message(AddTaskState.waiting_for_due_date)
async def task_due_date_entered(message: Message, state: FSMContext):
    due_date = message.text.strip()
    if not validate_due_date(due_date):
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –∞–±–æ –¥–∞—Ç–∞ –≤ –º–∏–Ω—É–ª–æ–º—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –†–†–†–†-–ú–ú-–î–î-–ì–ì:—Ö—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2025-04-21-14:30).")
        return
    await state.update_data(due_date=due_date)
    await message.answer("‚ö° –í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç (low, medium –∞–±–æ high):")
    await state.set_state(AddTaskState.waiting_for_priority)

@router.message(AddTaskState.waiting_for_priority)
async def task_priority_entered(message: Message, state: FSMContext):
    priority = message.text.strip().lower()
    if not validate_priority(priority):
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç. –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: low, medium –∞–±–æ high.")
        return
    await state.update_data(priority=priority)
    data = await state.get_data()

    new_task = {
        "id": len(tasks) + 1,
        "title": data['title'],
        "description": data['description'],
        "due_date": data['due_date'],
        "priority": data['priority'],
        "completed": False
    }
    tasks.append(new_task)

    await message.answer("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!", reply_markup=get_main_menu_keyboard())
    await state.clear()

# === –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ===
@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üîô *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:*",
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard()
    )


from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram import Dispatcher
  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω—É

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
async def add_task_handler(message: types.Message, state: FSMContext):
    # –í–∞—à–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–≤–¥–∞–Ω–Ω—è:")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –¥–µ–¥–ª–∞–π–Ω—É
async def process_deadline_handler(message: types.Message, state: FSMContext):
    deadline = message.text.strip()
    if not validate_deadline(deadline):
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD.")
        return
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑ –≤–≤–µ–¥–µ–Ω–∏–º –¥–µ–¥–ª–∞–π–Ω–æ–º
    await state.update_data(deadline=deadline)
    await message.answer("–î–µ–¥–ª–∞–π–Ω –ø—Ä–∏–π–Ω—è—Ç–∏–π! –í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –∑–∞–≤–¥–∞–Ω–Ω—è.")
    await AddTask.waiting_for_priority.set()


from aiogram import Dispatcher

# –í–∞—à—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏, FSM —Ç–∞ —ñ–Ω—à–µ

def register_handlers(dp: Dispatcher):
    @dp.message_handler(commands=['start'])
    async def start(message: types.Message):
        await message.answer("Hello, world!")




